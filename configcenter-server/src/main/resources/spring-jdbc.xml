<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">
	<description>数据源配置</description>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置阿里巴巴的druid数据源 -->
	<bean id="dataSourceDruid" class="com.alibaba.druid.pool.DruidDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${jdbc.driver}" />  
        <property name="url" value="${jdbc.url}" />  
        <property name="username" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
         
        <property name="maxActive" value="${druid.maxActive}" />  
        <property name="initialSize" value="${druid.initialSize}" />  
        <property name="maxWait" value="${druid.maxWait}" />  
        <property name="minIdle" value="${druid.minIdle}" />  
 
        <property name="removeAbandoned" value="${druid.removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->  
        <property name="logAbandoned" value="${druid.logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->  
    </bean>  
    <!--&lt;!&ndash; 配置dbcp数据源 &ndash;&gt; -->
    <!--<bean id="dataSourceDbcp" class="org.apache.commons.dbcp2.BasicDataSource"  -->
        <!--destroy-method="close">  -->
        <!--<property name="driverClassName" value="${jdbc.driver}" />  -->
        <!--<property name="url" value="${jdbc.url}" />  -->
        <!--<property name="username" value="${jdbc.username}" />  -->
        <!--<property name="password" value="${jdbc.password}" />  -->
        <!-- -->
        <!--<property name="maxTotal" value="${dbcp.maxTotal}" />  -->
        <!--<property name="maxIdle" value="${dbcp.maxIdle}" />-->
        <!--<property name="minIdle" value="${dbcp.minIdle}" />   -->
        <!--<property name="defaultAutoCommit" value="${dbcp.defaultAutoCommit}" />  -->
    <!--</bean>  -->
  
    <!-- jdbcTemplate -->  
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource">  
            <ref bean="dataSourceDruid" />  
        </property>  
    </bean>  
	<!-- 配置mybatis数据访问的sqlSessionFactory-->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceDruid"/>
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.cus.wob.model"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<!--<property name="properties">-->
						<!--<value>-->
							<!--dialect=mysql-->
							<!--reasonable=true-->
							<!--supportMethodsArguments=true-->
							<!--params=count=countSql-->
							<!--autoRuntimeDialect=true-->
						<!--</value>-->
					<!--</property>-->
				</bean>
			</array>
		</property>
	</bean>

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cus.wob.mapper"/>
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<property name="markerInterface" value="tk.mybatis.mapper.common.Mapper"/>
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
        -->
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	
    <!-- 配置Spring的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceDruid"/>
	</bean>
	
	
	<!-- 拦截代理对象，为了给业务逻辑对象增加事务处理 -->
	<!-- 
		transactionAttributes属性可以设置事务处理的方式，事务隔离级别，是否只读三个属性，用逗号隔开
		事务隔离级别各数据库系统不完全支持，一般不设置，用默认的即可
		事务处理选项有如下几个：（前面2个常用）
		PROPAGATION_REQUIRED － 需要事务处理。如果当前不存在事务环境，则创建一个
		PROPAGATION_SUPPORTS － 如果当前存在事务环境，则作为其中的一部分。如果不存在，则按非事务方式执行
		PROPAGATION_REQUIRES_NEW － 需要事务处理。并总是开启一个新事务。如果已经存在事务环境，则挂起之
		PROPAGATION_MANDATORY － 执行到指定方法时，必须已经存在事务环境，否则出错
		PROPAGATION_NEVER － 不支持事务操作，如果存在事务环境会出错
		PROPAGATION_NOT_SUPPORTED － 不支持事务操作。如果存在事务，则挂起
	-->
	<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			 <list>
                <value>*Service</value>
            </list>
		</property>
		<property name="proxyTargetClass" value="true"></property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
		<property name="transactionInterceptor" ref="transactionInterceptor" />
	</bean>

</beans>
